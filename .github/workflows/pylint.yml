# GitHub Actions Workflow for Running Pylint

# Name of the workflow, visible in the "Actions" tab of your repository
name: Pylint

# Define the events that trigger the workflow
on:
  # Schedule the workflow to run at midnight every Sunday (UTC)
  schedule:
    - cron: '0 0 * * SUN'  # Runs at 00:00 UTC on Sundays
  workflow_dispatch:        # Allows manual triggering

# Define the jobs that make up the workflow
jobs:
  lint:
    # The type of runner to execute the job on
    runs-on: ubuntu-latest  # Uses the latest version of Ubuntu

    # Strategy for running the job on multiple Python versions
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]  # Python versions to test against

    # Steps represent a sequence of tasks to be executed as part of the job
    steps:
      # Step 1: Checkout the repository code so the workflow can access it
      - uses: actions/checkout@v4
        name: Checkout Repository

      # Step 2: Set up the specified Python version from the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Cache pip dependencies to speed up subsequent workflow runs
      - name: Cache pip
        uses: actions/cache@v3
        with:
          # Directory where pip stores downloaded packages
          path: ~/.cache/pip
          # Unique key based on the OS and the contents of requirements.txt
          # Since requirements.txt is not yet created, using a static key
          key: ${{ runner.os }}-pip
          # Fallback keys to try restoring the cache
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install project dependencies and Pylint
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip to the latest version
          # NOTE: requirements.txt will be added in the future.
          # For now, installing Pylint only.
          pip install pylint                    # Install Pylint for linting

      # Step 5: Run Pylint to analyze the Python code for quality issues
      - name: Analyze Code with Pylint
        run: |
          pylint $(git ls-files '*.py')  # Lint all tracked Python files
